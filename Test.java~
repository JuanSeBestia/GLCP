
// import de librerias de runtime de ANTLR
import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

public class Test {
	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {// crear un
																// analizador
																// léxico que se
																// alimenta a
																// partir de la
																// entrada
																// (archivo o
																// consola)
		/*
		 * UNALangLexer lexer; if (args.length>0) lexer = new UNALangLexer(new
		 * ANTLRFileStream(args[0])); else lexer = new UNALangLexer(new
		 * ANTLRInputStream(System.in));
		 */

		// ANTLRInputStream input = new ANTLRFileStream(args[0]);
		// ANTLRInputStream input1 = new ANTLRFileStream(args[1]);
		// Solo prueba
		ANTLRInputStream input = new ANTLRFileStream("test.py");
		ANTLRInputStream input1 = new ANTLRFileStream("Test1.py");

		Python3Lexer lexer = new Python3Lexer(input);
		Python3Lexer lexer1 = new Python3Lexer(input1);
		// Identificar al analizador léxico como fuente de tokens para el
		// sintactico
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		CommonTokenStream tokens1 = new CommonTokenStream(lexer1);
		// Crear el analizador sintáctico que se alimenta a partir del buffer de
		// tokens
		Python3Parser parser = new Python3Parser(tokens);
		Python3Parser parser1 = new Python3Parser(tokens1);

		System.out.println("adasd");
		ParseTree tree = parser.file_input(); // comienza el análisis en la
												// regla inicial
		ParseTree tree1 = parser1.file_input();
		ParseTreeWalker walker = new ParseTreeWalker();
		ParseTreeWalker walker1 = new ParseTreeWalker();
		Listener listener = new Listener(parser);
		Listener listener1 = new Listener(parser1);
		walker.walk(listener, tree);
		walker.walk(listener1, tree1);
		//Funcionalidad Basica
		System.out.println("*******Aqui empieza la funcionalidad Basica*****\n");
		
		String word1 = tree.toStringTree(parser);
		System.out.println("\nArbol1\n"+word1+"\n");
		String word2 = tree1.toStringTree(parser1);
		System.out.println("\nArbol2\n"+word2+"\n");

		double mindis = minDistance(word1, word2);
		//System.out.println("Mind Distance:"+ mindis);
		//System.out.println("pureba minDistance"+minDistance("Un pajaro grita", "Un pajar rnza"));
		double max = 0;
		if (word1.length() < word2.length()) {
			max = word2.length();

		} else
			max = word1.length();
		System.out.println("*****************Resultados******************************");
		System.out.println("Los codigos han pasado la prueba lexica y sintactico por lo cual es un codigo permitido del lenguaje");
		System.out.println("max" + max +" - minds: "+  mindis);
		double porcentaje = ((max - mindis) / max) * 100;
		System.out.println("Los codigos tienen un %" + porcentaje + "de acuerdo a su analisis syntactico por la coincidencias de sus arboes AST");
		System.out.println("Acontinuacion se mostraran los llamados de cada regla de la framatica en el codigo");
		String [] nf= listener.nombres_funciones; 
		String [] nf1 = listener1.nombres_funciones;
		
		int [] nvf =listener.numero_veces_funcion_llamada;
		int [] nvf1 =listener1.numero_veces_funcion_llamada;
		int [] dif =listener1.numero_veces_funcion_llamada;
		
		System.out.println("******Funcion**********llamados en codigo 1*******llamados en codigo 2******Diferencia");
		for (int i = 0; i < 84; i++) {
			dif [i] = (nvf[i]-nvf1[i])*(nvf[i]-nvf1[i]); // para caluclar la desviacion estandar
			System.out.println("funcion:"+nf[i]+"\t"+nvf[i]+"\t\t"+nvf1[i]+"\t\t"+(nvf[i]-nvf1[i]));
			
		}
		
		

		/*
		 * ParseTree tree1 = parser1.file_input(); // Create a generic parse
		 * tree walker that can trigger callbacks System.out.println("father1");
		 * System.out.println(tree.toStringTree(parser)); for(int
		 * i=0;i<tree.getChildCount();i++) { System.out.println("son1");
		 * System.out.println(tree.getChild(i).toStringTree(parser)); }
		 * System.out.println("father2");
		 * System.out.println(tree1.toStringTree(parser1)); for(int
		 * i=0;i<tree1.getChildCount();i++) { System.out.println("son2");
		 * System.out.println(tree1.getChild(i).toStringTree(parser1)); }
		 * //System.out.println(tree1.toStringTree(parser1)); for(int
		 * i=0;i<tree.getChildCount();i++) {
		 * 
		 * for(int j=0;j<tree1.getChildCount();j++) { System.out.println(
		 * "comparing "+ i+" "+j);
		 * System.out.println(minDistance(tree.getChild(i).toStringTree(parser),
		 * tree1.getChild(j).toStringTree(parser1))); } }
		 */

	}

	public static int minDistance(String word1, String word2) {
		int len1 = word1.length();
		int len2 = word2.length();

		// len1+1, len2+1, because finally return dp[len1][len2]
		int[][] dp = new int[len1 + 1][len2 + 1];

		for (int i = 0; i <= len1; i++) {
			dp[i][0] = i;
		}

		for (int j = 0; j <= len2; j++) {
			dp[0][j] = j;
		}

		// iterate though, and check last char
		for (int i = 0; i < len1; i++) {
			char c1 = word1.charAt(i);
			for (int j = 0; j < len2; j++) {
				char c2 = word2.charAt(j);

				// if last two chars equal
				if (c1 == c2) {
					// update dp value for +1 length
					dp[i + 1][j + 1] = dp[i][j];
				} else {
					int replace = dp[i][j] + 1;
					int insert = dp[i][j + 1] + 1;
					int delete = dp[i + 1][j] + 1;

					int min = replace > insert ? insert : replace;
					min = delete > min ? min : delete;
					dp[i + 1][j + 1] = min;
				}
			}
		}
		//System.out.println(dp);
		return dp[len1][len2];
	}

}
